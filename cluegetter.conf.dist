[cluegetter]

# Socket to use for internal communication with the cluegetter daemon.
ipc-socket = "/var/run/cluegetter/ipc.sock"

# Cluegetter allows to use multiple configurations of ClueGetter
# alongside each other sharing the same database. This allows for
# easy correlation (e.g. track a message by message id). The quota
# configuration is instance specific.
#
# A typical use case would be to have several MTAs each with a
# dedicated role (submission, mx, outbound). One would then define
# an instance type of 'submission', 'mx' and 'outbound'. All MTAs
# with the same role would generally use the same instance identifier.
#
# An instance identifier must be present in the 'instance' table
# prior to starting ClueGetter. ClueGetter will not start if the
# configured instance is not present in the database.
instance = default

# Enable NoOp mode, ensuring the MTA will never receive a 'Tempfail'
# or 'Reject' response from ClueGetter. Still, the would-be response
# is logged.
#
# By setting configuring Postfix with milter_default_action=accept and
# setting the 'noop' directive to true, all mail would be processed as
# if ClueGetter was not enabled by Postfix.
noop = false

# By default Cluegetter will try to recover as much as possible from
# any kind of error it encounters. However, sometimes it may be
# desirable to stop execution when a panic() occurs. Setting this to
# true will ensure the application does not recover but halts execution
# instead.
exit-on-panic = false

# RDBMS settings. Cluegetter has only been tested with Mysql, and as
# such that is the preferred RDBMS to use. Not enabling stictmode
# may lead to weird, vague, and undebuggable errors. Set at your own
# peril.
rdbms-driver           = mysql
rdbms-user             = root
rdbms-password         =
rdbms-protocol         = tcp
rdbms-address          = localhost:3306
rdbms-database         = cluegetter

# Various modules determine whether an email should be rejected. E.g.
# when an email is determined to be spam. Rejecting an email will
# generally result in the delivering MTA sending a bounce to the
# original sender without trying to send this email again. If the MTA
# using this instance of ClueGetter is used for submission purposes,
# clients will get to see an error when sending their mail as well as
# the reason as to why their email was blocked.
#
# Each module returns a suggested action (permit, tempfail or reject)
# together with a score. If the combined scores for all modules that
# suggest to reject the message are equal to or exceed this threshold,
# the message will be rejected.
message-reject-score   = 5

# Determines above what threshold a message should have the 'tempfail'
# result. Generally, an MTA receiving a 'tempfail' response will try
# to deliver a message again after a while.
#
# The tempfail score includes that of the reject score, so it should
# always be higher than the message-reject-score directive.
message-tempfail-score = 8

# All messages equal or above to this value can be marked as spam
# through the x-spam-flag header.
message-spamflag-score = 4.5

# Abort all checking modules when the score for a given result (permit,
# reject, tempfail) exceeds this score. Useful e.g. to stop scanning
# for SPAM when the quota limit is hit.
breaker-score = 25

# Determine what the milter module should listen at so Postfix can
# communicate with ClueGetter. Beware that Postfix uses a different
# syntax: http://www.postfix.org/MILTER_README.html#smtp-only-milters
#
# To use a TCP socket, use the format:  inet:port@host
# To use a unix socket, use the format: unix:pathname
milter-socket =  "inet:10033@127.0.0.1"

# IP's to always allow, no matter what.
whitelist = "127.0.0.0/8"
whitelist = "::1"

# Insert headers into each message. Can be repeated multiple times.
# Key and value are separated by a ':'.
# The following symbols can be used:
# %{hostname}       hostname
# %{rejectScore}    The reject score
# %{spamFlag}       YES/NO - Is higher than spam flag score, or not.
#
# It's possible to specify flags per header. Right now only [U]
# (unique) is supported. It ensures that all other headers with that
# key are removed.
#
# It's possible to delete headers with a certain key by supplying a
# unique flag with an empty value:
# add-header = [U] Foo:

add-header = X-Scanned: ClueGetter at %{hostname}
add-header = [U] X-Report-Abuse-To: abuse@example.com
add-header = [U] X-Spam-Score: %{rejectScore}
add-header = [U] X-Spam-Flag: %{spamFlag}

# Sometimes an email does not have a message-id header. Because it's a
# convenient way to track messages across MTAs.
insert-missing-message-id = true

# Interval (in seconds) with which you want to prune items that
# are beyond their retention period. Set to 0 to disable pruning.
archive-prune-interval = 21600

# The number of weeks to archive these items for before pruning them.
# If you don't want to archive something, set the retention time to '0'.
archive-retention-body = 2
archive-retention-header = 26
archive-retention-message-result = 2
archive-retention-message = 52

[moduleGroup "spam"]
module = 0.9 spamassassin
module = 0.1 rspamd

[http]
# Cluegetter can provide an HTTP interface that displays some runtime
# statistics and errors, and allows to search for processed messages.
# If you change the listen-host directive be sure to do configure
# your firewall appropriately. There is no authentication mechanism
# whatsoever.

enabled = true

# Your Google Analytics ID
google-analytics = ""

[httpFrontend "default"]
enabled     = true
listen-port = 1937
listen-host = "0.0.0.0"

[redis]
# Redis can be used as a cache so that ClueGetter will continue functioning
# even when the RDBMS becomes unavailable. The '''host''' directive can be
# repeated multiple times if you're running a redis cluster.
enabled = false
host = "localhost:6379"

[bounceHandler]
# Enable the Bounce Handler functionality in order to get insights in
# What emails could not be (immediately) delivered. Please refer to the
# README file for instructions on how to use this.
enabled     = false
listen-port = 10034
listen-host = "127.0.0.1"

# For debugging purposes a directory can be specified to persist a copy
# of all incoming delivery reports.
# dump-dir = "/var/cache/cluegetter/deliveryreports"

[mailQueue]
# Show and manipulate items currently in the (Postfix) queue.

enabled = false

# Postfix spool dir. Make sure to leave out any trailing slashes.
spool-dir = /var/spool/postfix

# The interval (in seconds) with which to fetch the mail queue.
# update-interval = 5

# postcat-executable = /usr/sbin/postcat
# postsuper-executable = /usr/sbin/postsuper

[greylisting]
# When the greylisting module is enabled, hosts that haven not been seen
# before and that seem a little spammy are temporarily rejected until
# the initial period has passed by. Most spambots will only try to deliver
# an email only once or twice within a few minutes. And as such, will be
# deferred from sending any spam at all.

enabled = false

# Score to give host not seen before.
initial-score = 5.5

# Period after which a host should try to deliver again.
initial-period = 5

# A list of host names to retrieve the SPF records for and whitelist
# the ip's contained in the SPF rcords.
whitelist-spf = transip.email
whitelist-spf = aol.com
whitelist-spf = gmail.com
whitelist-spf = hotmail.com
whitelist-spf = outlook.com
whitelist-spf = skynet.be
whitelist-spf = servers.mcsv.net  # MailChimp & Mandrill

[quotas]
# Enable the Quota module
enabled = false

# Factors to account for. For each factor that's enabled there should
# be at least one row in the 'quota' table in the database. Furthermore,
# at least one quota_profile and quota_profile_period should be configured.
account-client-address = true
account-sender = false
account-recipient = false
account-sasl-username = false

[rspamd]
enabled    = false
host       = 127.0.0.1
port       = 11333
multiplier = 0.67

[spamassassin]
# Have message be vetted by SpamAssassin. SpamAssassin should be configured
# to listen at the specified host and port if the enabled direcive is set
# to true.
enabled = false
host    = 127.0.0.1
port    = 783

# Abort connecting to SpamAssassin if it takes longer than the configured
# timeout (in seconds) to set up a connection.
connect-timeout = 0.1

# Abort determining if a message is spam after this amount of seconds.
timeout = 10.0

# The max message size (in bytes) to send to SpamAssassin.
max-size = 8388608

# You can script your own modules using Lua.
# [luaModule "something"]
# enabled = true
# script = ./lua/something.lua
